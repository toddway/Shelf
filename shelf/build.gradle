apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply from: '../gradle/publish.gradle'

kotlin {
    iosX64('ios')
    jvm()
    js()

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
                implementation "com.squareup.moshi:moshi-kotlin:1.6.0"
                implementation 'com.google.code.gson:gson:2.8.6'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                implementation "io.ktor:ktor-client-android:$ktor_version"
                implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
                implementation "ch.qos.logback:logback-classic:1.2.3"
            }
        }
        iosMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
            }
        }
        iosTest {
            dependencies {
            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}



// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

[compileKotlinJs, compileTestKotlinJs]*.configure {
    kotlinOptions {
        moduleKind = "umd"
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone XR"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').outputFile
        println(binary.absolutePath)
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

apply plugin: 'org.jetbrains.kotlin.frontend'
kotlinFrontend {
    npm {
        devDependency("karma")
    }

    sourceMaps = true

    webpackBundle {
        bundleName = "main"
        proxyUrl = "http://localhost:8080"
    }
}

apply plugin: 'com.codingfeline.buildkonfig'
buildkonfig {
    packageName = 'com.toddway.shelf'
    defaultConfigs {
        buildConfigField 'STRING', 'token', project.getProp('TOKEN')
        buildConfigField 'STRING', 'url', project.getProp('URL')
    }
}

apply from: '../gradle/checks.gradle'
